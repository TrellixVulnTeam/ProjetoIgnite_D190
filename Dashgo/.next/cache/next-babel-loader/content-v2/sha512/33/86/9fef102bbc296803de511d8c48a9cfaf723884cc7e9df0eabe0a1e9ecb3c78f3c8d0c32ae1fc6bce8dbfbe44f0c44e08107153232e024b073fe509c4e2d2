{"ast":null,"code":"import { createServer, Factory, Model, Response, ActiveModelSerializer } from 'miragejs';\nimport faker from 'faker';\nexport function makeServer() {\n  var server = createServer({\n    serializers: {\n      application: ActiveModelSerializer\n    },\n    models: {\n      user: Model.extend({})\n    },\n    factories: {\n      user: Factory.extend({\n        name: function name(i) {\n          return \"User \".concat(i + 1);\n        },\n        email: function email() {\n          return faker.internet.email().toLowerCase();\n        },\n        createdAt: function createdAt() {\n          return faker.date.recent(10);\n        }\n      })\n    },\n    seeds: function seeds(server) {\n      server.createList('user', 200);\n    },\n    routes: function routes() {\n      this.namespace = 'api';\n      this.timing = 750;\n      this.get('/users', function (schema, req) {\n        var _req$queryParams = req.queryParams,\n            _req$queryParams$page = _req$queryParams.page,\n            page = _req$queryParams$page === void 0 ? 1 : _req$queryParams$page,\n            _req$queryParams$per_ = _req$queryParams.per_page,\n            per_page = _req$queryParams$per_ === void 0 ? 10 : _req$queryParams$per_;\n        var total = schema.all('user').length;\n        var pageStart = (Number(page) - 1) * Number(per_page);\n        var pageEnd = pageStart + Number(per_page);\n        var users = this.serialize(schema.all('user')).users.slice(pageStart, pageEnd);\n        return new Response(200, {\n          'x-total-count': String(total)\n        }, {\n          users: users\n        });\n      });\n      this.get('/users/:id');\n      this.post('/users');\n      this.namespace = '';\n      this.passthrough();\n    }\n  });\n  return server;\n}","map":{"version":3,"sources":["C:/Users/DVBLIW/Desktop/Projeto Ignite/Projeto 4 - Dashgo/src/services/mirage/index.ts"],"names":["createServer","Factory","Model","Response","ActiveModelSerializer","faker","makeServer","server","serializers","application","models","user","extend","factories","name","i","email","internet","toLowerCase","createdAt","date","recent","seeds","createList","routes","namespace","timing","get","schema","req","queryParams","page","per_page","total","all","length","pageStart","Number","pageEnd","users","serialize","slice","String","post","passthrough"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,QAAvC,EAAiDC,qBAAjD,QAA8E,UAA9E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAQA,OAAO,SAASC,UAAT,GAAsB;AAC3B,MAAMC,MAAM,GAAGP,YAAY,CAAC;AAC1BQ,IAAAA,WAAW,EAAE;AACXC,MAAAA,WAAW,EAAEL;AADF,KADa;AAK1BM,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAET,KAAK,CAACU,MAAN,CAA4B,EAA5B;AADA,KALkB;AAS1BC,IAAAA,SAAS,EAAE;AACTF,MAAAA,IAAI,EAAEV,OAAO,CAACW,MAAR,CAAe;AACnBE,QAAAA,IADmB,gBACdC,CADc,EACH;AACd,gCAAeA,CAAC,GAAG,CAAnB;AACD,SAHkB;AAInBC,QAAAA,KAJmB,mBAIX;AACN,iBAAOX,KAAK,CAACY,QAAN,CAAeD,KAAf,GAAuBE,WAAvB,EAAP;AACD,SANkB;AAOnBC,QAAAA,SAPmB,uBAOP;AACV,iBAAOd,KAAK,CAACe,IAAN,CAAWC,MAAX,CAAkB,EAAlB,CAAP;AACD;AATkB,OAAf;AADG,KATe;AAuB1BC,IAAAA,KAvB0B,iBAuBpBf,MAvBoB,EAuBZ;AACZA,MAAAA,MAAM,CAACgB,UAAP,CAAkB,MAAlB,EAA0B,GAA1B;AACD,KAzByB;AA2B1BC,IAAAA,MA3B0B,oBA2BjB;AACP,WAAKC,SAAL,GAAiB,KAAjB;AACA,WAAKC,MAAL,GAAc,GAAd;AAEA,WAAKC,GAAL,CAAS,QAAT,EAAmB,UAASC,MAAT,EAAiBC,GAAjB,EAAsB;AAAA,+BACHA,GAAG,CAACC,WADD;AAAA,qDAC/BC,IAD+B;AAAA,YAC/BA,IAD+B,sCACxB,CADwB;AAAA,qDACrBC,QADqB;AAAA,YACrBA,QADqB,sCACV,EADU;AAGvC,YAAMC,KAAK,GAAGL,MAAM,CAACM,GAAP,CAAW,MAAX,EAAmBC,MAAjC;AAEA,YAAMC,SAAS,GAAG,CAACC,MAAM,CAACN,IAAD,CAAN,GAAe,CAAhB,IAAqBM,MAAM,CAACL,QAAD,CAA7C;AACA,YAAMM,OAAO,GAAGF,SAAS,GAAGC,MAAM,CAACL,QAAD,CAAlC;AAEA,YAAMO,KAAK,GAAG,KAAKC,SAAL,CAAeZ,MAAM,CAACM,GAAP,CAAW,MAAX,CAAf,EACXK,KADW,CACLE,KADK,CACCL,SADD,EACYE,OADZ,CAAd;AAGA,eAAO,IAAInC,QAAJ,CACL,GADK,EAEL;AAAE,2BAAiBuC,MAAM,CAACT,KAAD;AAAzB,SAFK,EAGL;AAAEM,UAAAA,KAAK,EAALA;AAAF,SAHK,CAAP;AAKD,OAhBD;AAkBA,WAAKZ,GAAL,CAAS,YAAT;AACA,WAAKgB,IAAL,CAAU,QAAV;AAEA,WAAKlB,SAAL,GAAiB,EAAjB;AACA,WAAKmB,WAAL;AACD;AAtDyB,GAAD,CAA3B;AAyDA,SAAOrC,MAAP;AACD","sourcesContent":["import { createServer, Factory, Model, Response, ActiveModelSerializer } from 'miragejs'\nimport faker from 'faker'\n\ntype User = {\n  name: string;\n  email: string;\n  created_at: string;\n}\n\nexport function makeServer() {\n  const server = createServer({\n    serializers: {\n      application: ActiveModelSerializer,\n    },\n\n    models: {\n      user: Model.extend<Partial<User>>({})\n    },\n\n    factories: {\n      user: Factory.extend({\n        name(i: number) {\n          return `User ${i + 1}`\n        },\n        email() {\n          return faker.internet.email().toLowerCase();\n        },\n        createdAt() {\n          return faker.date.recent(10);\n        }\n      })\n    },\n\n    seeds(server) {\n      server.createList('user', 200)\n    },\n\n    routes() {\n      this.namespace = 'api';\n      this.timing = 750;\n\n      this.get('/users', function(schema, req) {\n        const { page = 1, per_page = 10 } = req.queryParams\n\n        const total = schema.all('user').length\n\n        const pageStart = (Number(page) - 1) * Number(per_page)\n        const pageEnd = pageStart + Number(per_page)\n\n        const users = this.serialize(schema.all('user'))\n          .users.slice(pageStart, pageEnd)\n\n        return new Response(\n          200,\n          { 'x-total-count': String(total) },\n          { users }\n        )\n      });\n      \n      this.get('/users/:id');\n      this.post('/users');\n\n      this.namespace = '';\n      this.passthrough();\n    }\n  })\n\n  return server;\n}"]},"metadata":{},"sourceType":"module"}