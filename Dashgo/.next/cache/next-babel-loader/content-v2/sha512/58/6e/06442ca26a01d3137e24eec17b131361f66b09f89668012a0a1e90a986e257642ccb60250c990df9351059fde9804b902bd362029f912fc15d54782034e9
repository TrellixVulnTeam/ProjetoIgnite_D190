{"ast":null,"code":"import { createServer, Factory, Model, Response, ActiveModelSerializer } from 'miragejs';\nimport faker from 'faker';\nexport function makeServer() {\n  const server = createServer({\n    serializers: {\n      application: ActiveModelSerializer\n    },\n    models: {\n      user: Model.extend({})\n    },\n    factories: {\n      user: Factory.extend({\n        name(i) {\n          return `User ${i + 1}`;\n        },\n\n        email() {\n          return faker.internet.email().toLowerCase();\n        },\n\n        createdAt() {\n          return faker.date.recent(10);\n        }\n\n      })\n    },\n\n    seeds(server) {\n      server.createList('user', 200);\n    },\n\n    routes() {\n      this.namespace = 'api';\n      this.timing = 750;\n      this.get('/users', function (schema, req) {\n        const {\n          page = 1,\n          per_page = 10\n        } = req.queryParams;\n        const total = schema.all('user').length;\n        const pageStart = (Number(page) - 1) * Number(per_page);\n        const pageEnd = pageStart + Number(per_page);\n        const users = this.serialize(schema.all('user')).users.slice(pageStart, pageEnd);\n        return new Response(200, {\n          'x-total-count': String(total)\n        }, {\n          users\n        });\n      });\n      this.get('/users/:id');\n      this.post('/users');\n      this.namespace = '';\n      this.passthrough();\n    }\n\n  });\n  return server;\n}","map":{"version":3,"sources":["C:/Users/DVBLIW/Desktop/Projeto Ignite/Projeto 4 - Dashgo/src/services/mirage/index.ts"],"names":["createServer","Factory","Model","Response","ActiveModelSerializer","faker","makeServer","server","serializers","application","models","user","extend","factories","name","i","email","internet","toLowerCase","createdAt","date","recent","seeds","createList","routes","namespace","timing","get","schema","req","page","per_page","queryParams","total","all","length","pageStart","Number","pageEnd","users","serialize","slice","String","post","passthrough"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,QAAvC,EAAiDC,qBAAjD,QAA8E,UAA9E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAQA,OAAO,SAASC,UAAT,GAAsB;AAC3B,QAAMC,MAAM,GAAGP,YAAY,CAAC;AAC1BQ,IAAAA,WAAW,EAAE;AACXC,MAAAA,WAAW,EAAEL;AADF,KADa;AAK1BM,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAET,KAAK,CAACU,MAAN,CAA4B,EAA5B;AADA,KALkB;AAS1BC,IAAAA,SAAS,EAAE;AACTF,MAAAA,IAAI,EAAEV,OAAO,CAACW,MAAR,CAAe;AACnBE,QAAAA,IAAI,CAACC,CAAD,EAAY;AACd,iBAAQ,QAAOA,CAAC,GAAG,CAAE,EAArB;AACD,SAHkB;;AAInBC,QAAAA,KAAK,GAAG;AACN,iBAAOX,KAAK,CAACY,QAAN,CAAeD,KAAf,GAAuBE,WAAvB,EAAP;AACD,SANkB;;AAOnBC,QAAAA,SAAS,GAAG;AACV,iBAAOd,KAAK,CAACe,IAAN,CAAWC,MAAX,CAAkB,EAAlB,CAAP;AACD;;AATkB,OAAf;AADG,KATe;;AAuB1BC,IAAAA,KAAK,CAACf,MAAD,EAAS;AACZA,MAAAA,MAAM,CAACgB,UAAP,CAAkB,MAAlB,EAA0B,GAA1B;AACD,KAzByB;;AA2B1BC,IAAAA,MAAM,GAAG;AACP,WAAKC,SAAL,GAAiB,KAAjB;AACA,WAAKC,MAAL,GAAc,GAAd;AAEA,WAAKC,GAAL,CAAS,QAAT,EAAmB,UAASC,MAAT,EAAiBC,GAAjB,EAAsB;AACvC,cAAM;AAAEC,UAAAA,IAAI,GAAG,CAAT;AAAYC,UAAAA,QAAQ,GAAG;AAAvB,YAA8BF,GAAG,CAACG,WAAxC;AAEA,cAAMC,KAAK,GAAGL,MAAM,CAACM,GAAP,CAAW,MAAX,EAAmBC,MAAjC;AAEA,cAAMC,SAAS,GAAG,CAACC,MAAM,CAACP,IAAD,CAAN,GAAe,CAAhB,IAAqBO,MAAM,CAACN,QAAD,CAA7C;AACA,cAAMO,OAAO,GAAGF,SAAS,GAAGC,MAAM,CAACN,QAAD,CAAlC;AAEA,cAAMQ,KAAK,GAAG,KAAKC,SAAL,CAAeZ,MAAM,CAACM,GAAP,CAAW,MAAX,CAAf,EACXK,KADW,CACLE,KADK,CACCL,SADD,EACYE,OADZ,CAAd;AAGA,eAAO,IAAInC,QAAJ,CACL,GADK,EAEL;AAAE,2BAAiBuC,MAAM,CAACT,KAAD;AAAzB,SAFK,EAGL;AAAEM,UAAAA;AAAF,SAHK,CAAP;AAKD,OAhBD;AAkBA,WAAKZ,GAAL,CAAS,YAAT;AACA,WAAKgB,IAAL,CAAU,QAAV;AAEA,WAAKlB,SAAL,GAAiB,EAAjB;AACA,WAAKmB,WAAL;AACD;;AAtDyB,GAAD,CAA3B;AAyDA,SAAOrC,MAAP;AACD","sourcesContent":["import { createServer, Factory, Model, Response, ActiveModelSerializer } from 'miragejs'\nimport faker from 'faker'\n\ntype User = {\n  name: string;\n  email: string;\n  created_at: string;\n}\n\nexport function makeServer() {\n  const server = createServer({\n    serializers: {\n      application: ActiveModelSerializer,\n    },\n\n    models: {\n      user: Model.extend<Partial<User>>({})\n    },\n\n    factories: {\n      user: Factory.extend({\n        name(i: number) {\n          return `User ${i + 1}`\n        },\n        email() {\n          return faker.internet.email().toLowerCase();\n        },\n        createdAt() {\n          return faker.date.recent(10);\n        }\n      })\n    },\n\n    seeds(server) {\n      server.createList('user', 200)\n    },\n\n    routes() {\n      this.namespace = 'api';\n      this.timing = 750;\n\n      this.get('/users', function(schema, req) {\n        const { page = 1, per_page = 10 } = req.queryParams\n\n        const total = schema.all('user').length\n\n        const pageStart = (Number(page) - 1) * Number(per_page)\n        const pageEnd = pageStart + Number(per_page)\n\n        const users = this.serialize(schema.all('user'))\n          .users.slice(pageStart, pageEnd)\n\n        return new Response(\n          200,\n          { 'x-total-count': String(total) },\n          { users }\n        )\n      });\n      \n      this.get('/users/:id');\n      this.post('/users');\n\n      this.namespace = '';\n      this.passthrough();\n    }\n  })\n\n  return server;\n}"]},"metadata":{},"sourceType":"module"}