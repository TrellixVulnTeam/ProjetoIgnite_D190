{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/DVBLIW/Desktop/Projeto Ignite/Projeto 4 - Dashgo/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/DVBLIW/Desktop/Projeto Ignite/Projeto 4 - Dashgo/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { api } from \"../api\";\nexport function getUsers(_x) {\n  return _getUsers.apply(this, arguments);\n}\n\nfunction _getUsers() {\n  _getUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n    var _yield$api$get, data, headers, totalCount, users;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get('users', {\n              params: {\n                page: page\n              }\n            });\n\n          case 2:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            headers = _yield$api$get.headers;\n            totalCount = Number(headers['x-total-count']);\n            users = data.users.map(function (user) {\n              return {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                createdAt: new Date(user.created_at).toLocaleDateString('pt-BR', {\n                  day: '2-digit',\n                  month: 'long',\n                  year: 'numeric'\n                })\n              };\n            });\n            return _context.abrupt(\"return\", {\n              users: users,\n              totalCount: totalCount\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getUsers.apply(this, arguments);\n}\n\nexport function useUsers(page) {\n  _s();\n\n  return useQuery(['users', page], function () {\n    return getUsers(page);\n  }, {\n    staleTime: 1000 * 60 * 10 // 10 minutos\n\n  });\n}\n\n_s(useUsers, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["C:/Users/DVBLIW/Desktop/Projeto Ignite/Projeto 4 - Dashgo/src/services/hooks/useUsers.ts"],"names":["useQuery","api","getUsers","page","get","params","data","headers","totalCount","Number","users","map","user","id","name","email","createdAt","Date","created_at","toLocaleDateString","day","month","year","useUsers","staleTime"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;AAcA,gBAAsBC,QAAtB;AAAA;AAAA;;;uEAAO,iBAAwBC,IAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BF,GAAG,CAACG,GAAJ,CAAQ,OAAR,EAAiB;AAC/CC,cAAAA,MAAM,EAAE;AACNF,gBAAAA,IAAI,EAAJA;AADM;AADuC,aAAjB,CAD3B;;AAAA;AAAA;AACGG,YAAAA,IADH,kBACGA,IADH;AACSC,YAAAA,OADT,kBACSA,OADT;AAOCC,YAAAA,UAPD,GAOcC,MAAM,CAACF,OAAO,CAAC,eAAD,CAAR,CAPpB;AASCG,YAAAA,KATD,GASSJ,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI,EAAI;AACnC,qBAAO;AACLC,gBAAAA,EAAE,EAAED,IAAI,CAACC,EADJ;AAELC,gBAAAA,IAAI,EAAEF,IAAI,CAACE,IAFN;AAGLC,gBAAAA,KAAK,EAAEH,IAAI,CAACG,KAHP;AAILC,gBAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASL,IAAI,CAACM,UAAd,EAA0BC,kBAA1B,CAA6C,OAA7C,EAAsD;AAC/DC,kBAAAA,GAAG,EAAE,SAD0D;AAE/DC,kBAAAA,KAAK,EAAE,MAFwD;AAG/DC,kBAAAA,IAAI,EAAE;AAHyD,iBAAtD;AAJN,eAAP;AAUD,aAXa,CATT;AAAA,6CAsBE;AACLZ,cAAAA,KAAK,EAALA,KADK;AAELF,cAAAA,UAAU,EAAVA;AAFK,aAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4BP,OAAO,SAASe,QAAT,CAAkBpB,IAAlB,EAAgC;AAAA;;AACrC,SAAOH,QAAQ,CAAC,CAAC,OAAD,EAAUG,IAAV,CAAD,EAAkB;AAAA,WAAMD,QAAQ,CAACC,IAAD,CAAd;AAAA,GAAlB,EAAwC;AACrDqB,IAAAA,SAAS,EAAE,OAAO,EAAP,GAAY,EAD8B,CAC1B;;AAD0B,GAAxC,CAAf;AAGD;;GAJeD,Q;UACPvB,Q","sourcesContent":["import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n  createdAt: string;\n}\n\ntype GetUsersResponse = {\n  users: User[];\n  totalCount: number;\n}\n\nexport async function getUsers(page: number): Promise<GetUsersResponse> {\n  const { data, headers } = await api.get('users', {\n    params: {\n      page\n    }\n  })\n\n  const totalCount = Number(headers['x-total-count'])\n  \n  const users = data.users.map(user => {\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      createdAt: new Date(user.created_at).toLocaleDateString('pt-BR', {\n        day: '2-digit',\n        month: 'long',\n        year: 'numeric'\n      })\n    }\n  })\n\n  return {\n    users,\n    totalCount\n  };\n}\n\nexport function useUsers(page: number) {\n  return useQuery(['users', page], () => getUsers(page), {\n    staleTime: 1000 * 60 * 10, // 10 minutos\n  })\n}"]},"metadata":{},"sourceType":"module"}