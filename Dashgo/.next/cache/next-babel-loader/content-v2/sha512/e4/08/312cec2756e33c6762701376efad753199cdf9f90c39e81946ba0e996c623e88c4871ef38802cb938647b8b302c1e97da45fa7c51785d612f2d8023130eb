{"ast":null,"code":"import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\nexport async function getUsers(page) {\n  const {\n    data,\n    headers\n  } = await api.get('users', {\n    params: {\n      page\n    }\n  });\n  const totalCount = Number(headers['x-total-count']);\n  const users = data.users.map(user => {\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      createdAt: new Date(user.created_at).toLocaleDateString('pt-BR', {\n        day: '2-digit',\n        month: 'long',\n        year: 'numeric'\n      })\n    };\n  });\n  return {\n    users,\n    totalCount\n  };\n}\nexport function useUsers(page) {\n  return useQuery(['users', page], () => getUsers(page), {\n    staleTime: 1000 * 60 * 10 // 10 minutos\n\n  });\n}","map":{"version":3,"sources":["C:/Users/DVBLIW/Desktop/Projeto Ignite/Projeto 4 - Dashgo/src/services/hooks/useUsers.ts"],"names":["useQuery","api","getUsers","page","data","headers","get","params","totalCount","Number","users","map","user","id","name","email","createdAt","Date","created_at","toLocaleDateString","day","month","year","useUsers","staleTime"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;AAcA,OAAO,eAAeC,QAAf,CAAwBC,IAAxB,EAAiE;AACtE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoB,MAAMJ,GAAG,CAACK,GAAJ,CAAQ,OAAR,EAAiB;AAC/CC,IAAAA,MAAM,EAAE;AACNJ,MAAAA;AADM;AADuC,GAAjB,CAAhC;AAMA,QAAMK,UAAU,GAAGC,MAAM,CAACJ,OAAO,CAAC,eAAD,CAAR,CAAzB;AAEA,QAAMK,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeC,IAAI,IAAI;AACnC,WAAO;AACLC,MAAAA,EAAE,EAAED,IAAI,CAACC,EADJ;AAELC,MAAAA,IAAI,EAAEF,IAAI,CAACE,IAFN;AAGLC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KAHP;AAILC,MAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASL,IAAI,CAACM,UAAd,EAA0BC,kBAA1B,CAA6C,OAA7C,EAAsD;AAC/DC,QAAAA,GAAG,EAAE,SAD0D;AAE/DC,QAAAA,KAAK,EAAE,MAFwD;AAG/DC,QAAAA,IAAI,EAAE;AAHyD,OAAtD;AAJN,KAAP;AAUD,GAXa,CAAd;AAaA,SAAO;AACLZ,IAAAA,KADK;AAELF,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASe,QAAT,CAAkBpB,IAAlB,EAAgC;AACrC,SAAOH,QAAQ,CAAC,CAAC,OAAD,EAAUG,IAAV,CAAD,EAAkB,MAAMD,QAAQ,CAACC,IAAD,CAAhC,EAAwC;AACrDqB,IAAAA,SAAS,EAAE,OAAO,EAAP,GAAY,EAD8B,CAC1B;;AAD0B,GAAxC,CAAf;AAGD","sourcesContent":["import { useQuery } from \"react-query\";\nimport { api } from \"../api\";\n\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n  createdAt: string;\n}\n\ntype GetUsersResponse = {\n  users: User[];\n  totalCount: number;\n}\n\nexport async function getUsers(page: number): Promise<GetUsersResponse> {\n  const { data, headers } = await api.get('users', {\n    params: {\n      page\n    }\n  })\n\n  const totalCount = Number(headers['x-total-count'])\n  \n  const users = data.users.map(user => {\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      createdAt: new Date(user.created_at).toLocaleDateString('pt-BR', {\n        day: '2-digit',\n        month: 'long',\n        year: 'numeric'\n      })\n    }\n  })\n\n  return {\n    users,\n    totalCount\n  };\n}\n\nexport function useUsers(page: number) {\n  return useQuery(['users', page], () => getUsers(page), {\n    staleTime: 1000 * 60 * 10, // 10 minutos\n  })\n}"]},"metadata":{},"sourceType":"module"}